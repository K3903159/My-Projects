  1|      MOV R0, #0        // Initialize seconds to 0
  2|      MOV R6, #0        // Initialize minutes to 0
  3|      MOV R4, #1        // Delay time
  4|start:
  5|      LDR R11, .LastKeyAndReset
  6|      CMP R11, #80      // Compare if last key pressed == "P"
  7|      BEQ pause         // If last key pressed == "P", branch to pause
  8|      CMP R11, #82      // If last key pressed == "R", branch to reset
  9|      BEQ reset
 10|      CMP R11, #83      // If last key pressed == "S", branch to split_time
 11|      BEQ split_time
 12|      CMP R11, #69      // If last key pressed == "E", branch to end
 13|      BEQ end
 14|      LDR R1, .Time     // Start time
 15|timer:
 16|      LDR R2, .Time     // Current time
 17|      SUB R3, R2, R1    // Elapsed time = Current time - Start time
 18|      CMP R3, R4        // Compare Elapsed time to delay time
 19|      BLT timer
 20|seconds_loop:
 21|      ADD R0, R0, #1    // Add 1 to value in R0 (seconds)
 22|      CMP R0, #60       // Compare value in R0 to 60
 23|      BLT display_time  // If R0 < 60, branch to display_time
 24|      MOV R0, #0        // Reset seconds to 0
 25|      B minutes_loop    // >= 60, branch to minutes_loop
 26|display_time:
 27|      CMP R6, #10       // Check if minutes < 10
 28|      BLT display_min_padding
 29|      STR R6, .WriteUnsignedNum // Print current value in R6 (minutes)
 30|      B display_sec
 31|display_sec:
 32|      MOV R7, #colon    // Move string in colon: to R7
 33|      STR R7, .WriteString // Print separator ":"
 34|      CMP R0, #10       // Check if seconds < 10
 35|      BLT display_sec_padding
 36|      STR R0, .WriteUnsignedNum // Print current value in R0 (seconds)
 37|      B print_newline
 38|display_sec_padding:
 39|      MOV R5, #zero     // Move string in zero: to R5
 40|      STR R5, .WriteString // Print leading zero
 41|      STR R0, .WriteUnsignedNum // Print current value in R0 (seconds)
 42|print_newline:
 43|      MOV R5, #newline  // Move string in newline: to R5
 44|      STR R5, .WriteString // Print newline
 45|      B start           // Branch back to start
 46|minutes_loop:
 47|      ADD R6, R6, #1    // Add 1 to value in R6 (minutes)
 48|      CMP R6, #60       // Compare value in R6 to 60
 49|      BLT display_min   // If R6 < 60, branch to display_min
 50|      MOV R6, #0
 51|      B start           // Stop program
 52|display_min:
 53|      CMP R6, #10       // Check if minutes < 10
 54|      BLT display_min_padding
 55|      STR R6, .WriteUnsignedNum // Print current value in R6 (minutes)
 56|      B display_sec
 57|display_min_padding:
 58|      MOV R5, #zero     // Move string in zero: to R5
 59|      STR R5, .WriteString // Print leading zero
 60|      STR R6, .WriteUnsignedNum // Print current value in R6 (minutes)
 61|      B display_sec
 62|split_time:
 63|      MOV R8, #split
 64|      STR R8, .WriteString
 65|      B display_time
 66|pause:
 67|      LDR R11, .LastKeyAndReset // Check for keyboard input
 68|      CMP R11, #80
 69|      BEQ start         // Loop through pause until "P" is pressed to branch back to start
 70|      CMP R11, #82
 71|      BEQ reset
 72|      B pause
 73|reset:
 74|      MOV R0, #0        // Reset seconds to 0
 75|      MOV R6, #0        // Reset minutes to 0
 76|      B clear           // Branch to clear
 77|clear:
 78|      STR R5, .WriteString // Print newlines to clear screen
 79|      STR R5, .WriteString
 80|      STR R5, .WriteString
 81|      B pause           // Branch to pause so you have to press "P" again to resume
 82|end:
 83|      HALT              // Stop program
 84|newline: .ASCIZ "\n"
 85|colon: .ASCIZ ":"
 86|zero: .ASCIZ "0"
 87|split: .ASCIZ "Split time: "
